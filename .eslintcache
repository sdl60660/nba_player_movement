[{"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js":"1","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js":"2","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js":"3","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js":"4","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js":"5","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js":"6"},{"size":2011,"mtime":1609977852095,"results":"7","hashOfConfig":"8"},{"size":5998,"mtime":1609979123376,"results":"9","hashOfConfig":"8"},{"size":1420,"mtime":1609977750651,"results":"10","hashOfConfig":"8"},{"size":116,"mtime":1609874045521,"results":"11","hashOfConfig":"8"},{"size":687,"mtime":1609884950379,"results":"12","hashOfConfig":"8"},{"size":362,"mtime":1609865011532,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1d86ciq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js",["27","28","29","30"],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js",["31","32","33"],"import * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { voronoiMapSimulation } from 'd3-voronoi-map';\nimport seedrandom from 'seedrandom';\n\n\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nconst getCircleCoordinates = (centerX, centerY, radius, sides) => {\n    let coordinates = [];\n    \n    for (var i = 0; i < sides; i++) {\n        const coordinate = [\n            (centerX + radius * Math.cos(2 * Math.PI * i / sides)),\n            (centerY + radius * Math.sin(2 * Math.PI * i / sides))\n        ];\n        coordinates.push(coordinate)\n    }\n    \n    return coordinates;\n}\n\nclass PlayerMap {\n\n    containerEl;\n    props;\n    svg; \n  \n    constructor(containerEl, props) {\n        this.containerEl = containerEl;\n        this.props = props;\n\n        const { width, height, mapColor, geoData, teamData, playerData } = props;\n        console.log(props);\n\n        this.svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        const geoJSON = topojson.feature(geoData, geoData.objects.states);\n\n        const projection = d3.geoAlbersUsa()\n            .fitExtent([[20, 20], [width-20, height-20]], geoJSON);\n\n        this.weightScale = d3.scaleLinear()\n                            .domain(d3.extent(playerData, (d) => d.vorp))\n                            .range([1,100])\n        \n        this.voronoiRadius = d3.scaleLinear()\n                            .domain([0, 350])\n                            .range([0, 50])\n\n        this.generateMap({ geoJSON, projection, mapColor })\n        this.generateTeams({ teamData, playerData, projection });\n    \n    }\n    \n    generateMap = ({ geoJSON, projection, mapColor }) => {\n        geoJSON.features = geoJSON.features.filter(d => ![\"Alaska\", \"Hawaii\"].includes(d.properties.NAME));\n\n        let path = d3.geoPath()\n            .projection(projection);\n                \n        this.mapPath = this.svg.append(\"g\")\n            .attr(\"class\", \"background-map\")\n            .selectAll(\"path\");\n        \n        this.mapPath = this.mapPath.data( geoJSON.features, d => d)\n            .join(\n                enter => enter.append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"state-path\")\n                    .style(\"opacity\", 0.8)\n                    .style(\"stroke\",\"black\")\n                    .style('stroke-width', 0.5)\n                    .style(\"fill\", mapColor)\n\n                // exit => exit.remove()\n            );\n    }\n    \n    generateTeams = ({ teamData, playerData, projection }) => {\n        this.teams = this.svg.append(\"g\")\n            .attr(\"class\", \"teams\");\n      \n        this.teamGroups = this.teams.selectAll(\"g\")\n            .data(teamData, d => d.team_id)\n            .enter()\n            .append(\"g\")\n                .attr(\"class\", d => `team-group ${d.team_id}-group`);\n\n        teamData.forEach((teamData) => {\n            const [xCenter, yCenter] = projection([teamData.longitude, teamData.latitude])\n            teamData.xCoordinate = xCenter;\n            teamData.yCoordinate = yCenter;\n\n            const players = playerData\n                .filter((player) => player.team_id === teamData.team_id)\n                .map((player) => ({ \n                    weight: this.weightScale(player.vorp),\n                    player_name: player.player,\n                    player_id: player.player_id,\n                    team: player.team_id,\n                    per: player.per\n                }))\n            \n            const weightSum = players.map((x) => x.weight).reduce((a, b) => a + b, 0);\n            teamData.radius = this.voronoiRadius(weightSum);\n\n            this.addTeamTreemap({ teamData, players, projection });\n        })\n\n        const tick = () => {\n            this.teamGroups\n                .style(\"transform\", d => {\n                    let dx = d.x - d.xCoordinate\n                    let dy = d.y - d.yCoordinate\n                    return `translate(${dx}px, ${dy}px)`\n                })\n        }\n\n        const simulation = d3.forceSimulation()\n            .nodes(teamData)\n            .force('x', d3.forceX(d => d.xCoordinate).strength(1.0))\n            .force('y', d3.forceY(d => d.yCoordinate).strength(1.0))\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"collision\", d3.forceCollide(d => d.radius + 4))\n            .on(\"tick\", tick)\n            // .stop()\n        \n        for (let i =0; i < 500; i++) {\n            simulation.tick();\n        };\n    \n    }\n\n    addTeamTreemap = ({ teamData, players, projection }) => {\n\n        // const treemapRadius = 45;\n        console.log(players);\n        \n        const simulation = voronoiMapSimulation(players)\n            // .prng(seedrandom('seed'))\n            .clip(getCircleCoordinates(teamData.xCoordinate, teamData.yCoordinate, teamData.radius, 35))\n            .stop()                                               \n\n        let state = simulation.state();\n        while (!state.ended) {\n            simulation.tick();\n            state = simulation.state();\n        }\n        \n        let teamGroup = this.teams\n            .select(`.${teamData.team_id}-group`);\n        \n        let playerPolygons = teamGroup\n            .selectAll(\".player-polygons\")\n            .data(state.polygons)\n            .enter()\n                .append('path')\n                .attr(\"class\", \"player-polygons\")\n                .attr('d', (d) => \"M\" + d + \"z\")\n                .style(\"fill\", teamData.color_1)\n                .style(\"stroke\", teamData.color_2)\n                .style(\"stroke-width\", \"3px\");\n                // .style('fill', (d) =>  fillScale(d.site.originalObject));\n        \n    }\n\n    updateMapColor = ({ opacity, mapColor }) => { \n        this.mapPath\n            .transition()\n            // .duration(300)\n            .style(\"fill-opacity\", opacity)\n            .style(\"fill\", mapColor);\n    }\n  \n    resize = (width, height) => { /*...*/ }\n    \n  }\n  \n  export default PlayerMap;","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js",[],{"ruleId":"34","severity":1,"message":"35","line":17,"column":21,"nodeType":"36","messageId":"37","endLine":17,"endColumn":31},{"ruleId":"34","severity":1,"message":"38","line":18,"column":22,"nodeType":"36","messageId":"37","endLine":18,"endColumn":33},{"ruleId":"34","severity":1,"message":"39","line":19,"column":24,"nodeType":"36","messageId":"37","endLine":19,"endColumn":37},{"ruleId":"40","severity":1,"message":"41","line":40,"column":8,"nodeType":"42","endLine":40,"endColumn":10,"suggestions":"43"},{"ruleId":"34","severity":1,"message":"44","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":18},{"ruleId":"34","severity":1,"message":"45","line":7,"column":7,"nodeType":"36","messageId":"37","endLine":7,"endColumn":19},{"ruleId":"34","severity":1,"message":"46","line":156,"column":13,"nodeType":"36","messageId":"37","endLine":156,"endColumn":27},"no-unused-vars","'setGeoData' is assigned a value but never used.","Identifier","unusedVar","'setTeamData' is assigned a value but never used.","'setPlayerData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'geoData', 'height', 'mapColor', 'playerData', 'teamData', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["47"],"'seedrandom' is defined but never used.","'getRandomInt' is assigned a value but never used.","'playerPolygons' is assigned a value but never used.",{"desc":"48","fix":"49"},"Update the dependencies array to be: [geoData, height, mapColor, playerData, teamData, width]",{"range":"50","text":"51"},[1523,1525],"[geoData, height, mapColor, playerData, teamData, width]"]