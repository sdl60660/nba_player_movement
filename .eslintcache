[{"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js":"1","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js":"2","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js":"3","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js":"4","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js":"5","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js":"6","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reducers/transactionReducer.js":"7","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/TransactionCard.js":"8"},{"size":3089,"mtime":1610424132657,"results":"9","hashOfConfig":"10"},{"size":17520,"mtime":1610390832285,"results":"11","hashOfConfig":"10"},{"size":1797,"mtime":1610421106072,"results":"12","hashOfConfig":"10"},{"size":116,"mtime":1609874045521,"results":"13","hashOfConfig":"10"},{"size":687,"mtime":1609884950379,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1609865011532,"results":"15","hashOfConfig":"10"},{"size":435,"mtime":1610215117939,"results":"16","hashOfConfig":"10"},{"size":530,"mtime":1610426733884,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1d86ciq",{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js",["36","37","38","39","40","41","42"],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js",["43","44","45","46","47"],"import * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { voronoiMapSimulation } from 'd3-voronoi-map';\nimport seedrandom from 'seedrandom';\nimport { groupBy } from 'lodash';\n\n\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nconst generateCirclePath = (cx, cy, r) => {\n  return \"M\" + cx + \",\" + cy + \" \" +\n         \"m\" + -r + \", 0 \" +\n         \"a\" + r + \",\" + r + \" 0 1,0 \" + r*2  + \",0 \" +\n         \"a\" + r + \",\" + r + \" 0 1,0 \" + -r*2 + \",0Z\";\n};\n\nconst getCircleCoordinates = (centerX, centerY, radius, sides) => {\n    if (radius === 0) {\n        throw Error(\"Radius may not equal zero\")\n    }\n\n    let coordinates = [];\n    \n    for (var i = 0; i < sides; i++) {\n        const coordinate = [\n            (centerX + radius * Math.cos(2 * Math.PI * i / sides)),\n            (centerY + radius * Math.sin(2 * Math.PI * i / sides))\n        ];\n        coordinates.push(coordinate)\n    }\n    \n    return coordinates;\n}\n\nclass PlayerMap {\n\n    containerEl;\n    props;\n    svg; \n  \n    constructor(containerEl, props) {\n        this.containerEl = containerEl;\n        this.props = props;\n\n        const { width, height, mapColor, geoData, teamData, playerData } = props;\n        // console.log(props);\n        this.attribute = \"salary\";\n\n        this.maxWeight = 100;\n        this.weightScale = d3.scaleLinear()\n            .domain(d3.extent(playerData, (d) => d[this.attribute]))\n            .range([1, this.maxWeight]);\n        \n        let signedPlayers = playerData.filter(d => d.team_id !== \"FA\" && d.team_id !== \"RET\")\n        let teamTotalWeights = Object.values(groupBy(signedPlayers, (d) => d.team_id))\n                            .map(array => {\n                                return array\n                                    .map(d => this.weightScale(d[this.attribute]))\n                                    .reduce((a, b) => a + b, 0);\n                            })\n                            \n        this.maxTotalWeight = d3.max(teamTotalWeights);\n        // console.log(teamTotalWeights, this.maxTotalWeight);\n        this.maxCircleRadius = 57;\n\n        this.voronoiRadius = d3.scaleLinear()\n            .domain([0, this.maxTotalWeight])\n            .range([0, this.maxCircleRadius])\n        \n        // console.log(39219565, this.weightScale(39219565), this.voronoiRadius(this.weightScale(39219565)))\n\n        this.playerData = playerData.map((player) => ({ \n            weight: this.weightScale(player[this.attribute]),\n            player_name: player.player,\n            player_id: player.player_id,\n            team: teamData.find((team) => team.team_id === player.team_id),\n            per: player.per,\n            salary: player[\"2021_salary\"],\n            vorp: player.vorp\n        }));\n\n        this.teamData = teamData;\n        this.trueTeamData = teamData.filter(d => d.team_id !== 'FA' && d.team_id !== 'RET');\n \n        this.svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        this.initPlayerPhotos({ playerData })\n        \n        const geoJSON = topojson.feature(geoData, geoData.objects.states);\n        const projection = d3.geoAlbersUsa()\n            .fitExtent([[30, 30], [width-50, height-50]], geoJSON);\n        this.generateMap({ geoJSON, projection, mapColor });\n\n        this.generateTeamGroups({ projection });\n\n        let allPolygons = [];\n        this.trueTeamData.forEach((team) => {\n            let players = this.playerData.filter((player) => player.team !== undefined && player.team.team_id === team.team_id);\n            let polygons = this.addTeamTreemap({ team, players })\n            allPolygons = allPolygons.concat(polygons);\n        })\n\n        this.generatePolygons(allPolygons);\n\n        setTimeout(() => {\n            let newTeams = [\"BOS\", \"MIA\", \"DET\", \"CHI\"];\n            let affectedTeams = [...newTeams]\n            let affectedPlayers = [];\n            Array(12, 35, 102, 121).forEach((index, i) => {\n                \n                const playerId = this.playerData[index].player_id;\n                let oldTeam = this.updateTeam(playerId, newTeams[i])\n                console.log(oldTeam)\n                if (oldTeam !== 'FA' && oldTeam !== 'RET') {\n                    affectedTeams.push(oldTeam)\n                }\n                affectedPlayers.push(playerId)\n            })\n            affectedTeams = [...new Set(affectedTeams)];\n            console.log('Affected Teams', affectedTeams)\n\n\n            this.runTransactions(this.playerData, allPolygons, affectedTeams, affectedPlayers)\n\n        }, 5000)\n\n\n    }\n\n    updateTeam = ( playerId, newTeamId ) => {\n        const arrayIndex = this.playerData.findIndex(d => d.player_id === playerId);\n        let oldTeam = this.playerData[arrayIndex].team.team_id;\n        this.playerData[arrayIndex] = {\n            ...this.playerData[arrayIndex],\n            team: this.teamData.find(team => team.team_id === newTeamId)\n        };\n        return oldTeam;\n    };\n\n    initPlayerPhotos = ({ playerData }) => {\n        const defs = this.svg.append('svg:defs');\n        defs.selectAll(\".player-photo\")\n            .data(playerData, d => d.player_id)\n            .enter()\n                .append(\"svg:pattern\")\n                .attr(\"class\", \"player-photo\")\n                .attr(\"id\", d => `${d.player_id}-photo`)\n                .attr(\"height\", 1)\n                .attr(\"width\", 1)\n                .attr(\"patternUnits\", \"objectBoundingBox\")\n                .append(\"svg:image\")\n                    .attr(\"xlink:href\", d => `images/${d.player_id}.png`)\n                    // Found the ratio of salary to polygon area, per unit of circle radius range (~159), then took sqrt to get length of one side (width)\n                    // (0.45462857 * this.maxTotalWeight)\n                    // .attr(\"width\", d => {\n                    //     Math.sqrt( this.voronoiRadius(this.weightScale(d[this.attribute])) / this.maxCircleRadius )\n                    // })\n                    .attr(\"width\", d => Math.sqrt(d[this.attribute] / (159.12 * 57)))\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n    }\n    \n    generateMap = ({ geoJSON, projection, mapColor }) => {\n        geoJSON.features = geoJSON.features.filter(d => ![\"Alaska\", \"Hawaii\"].includes(d.properties.NAME));\n\n        let path = d3.geoPath()\n            .projection(projection);\n                \n        this.mapPath = this.svg.append(\"g\")\n            .attr(\"class\", \"background-map\")\n            .selectAll(\"path\");\n        \n        this.mapPath = this.mapPath.data( geoJSON.features, d => d)\n            .join(\n                enter => enter.append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"state-path\")\n                    .style(\"opacity\", 0.8)\n                    .style(\"stroke\",\"black\")\n                    .style('stroke-width', 0.5)\n                    .style(\"fill\", mapColor)\n\n                // exit => exit.remove()\n            );\n    }\n    \n    generateTeamGroups = ({ projection }) => {\n        this.teams = this.svg.append(\"g\")\n            .attr(\"class\", \"teams\");\n        \n        \n      \n        this.teamGroups = this.teams.selectAll(\"g\")\n            .data(this.trueTeamData, d => d.team_id)\n            .enter()\n            .append(\"g\")\n                .attr(\"class\", d => `team-group ${d.team_id}-group`);\n\n        this.trueTeamData.forEach((team) => {\n            const [xCenter, yCenter] = projection([team.longitude, team.latitude])\n            team.xCoordinate = xCenter;\n            team.yCoordinate = yCenter;\n\n            const players = this.playerData\n                .filter((player) => player.team !== undefined && player.team.team_id === team.team_id);\n            const weightSum = players.map((x) => x.weight).reduce((a, b) => a + b, 0);\n            team.radius = this.voronoiRadius(weightSum);\n            // this.addTeamTreemap({ teamData, players });\n        })\n\n        const tick = () => {\n            this.teamGroups\n                .style(\"transform\", d => {\n                    let dx = d.x - d.xCoordinate\n                    let dy = d.y - d.yCoordinate\n                    return `translate(${dx}px, ${dy}px)`\n                })\n        }\n\n        const simulation = d3.forceSimulation()\n            .nodes(this.teamData)\n            .force('x', d3.forceX(d => d.xCoordinate).strength(1.0))\n            .force('y', d3.forceY(d => d.yCoordinate).strength(1.0))\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"collision\", d3.forceCollide(d => d.radius + 4))\n            .on(\"tick\", tick)\n            // .stop()\n        \n        for (let i =0; i < 500; i++) {\n            simulation.tick();\n        };\n    \n    }\n\n    addTeamTreemap = ({ team, players }) => {\n        let xVal = team.x || team.xCoordinate;\n        let yVal = team.y || team.yCoordinate;\n        \n        const simulation = voronoiMapSimulation(players)\n            .prng(seedrandom('randomsed'))\n            .clip(getCircleCoordinates(xVal, yVal, team.radius, 35))\n            .initialPosition((d) => {\n                const polygon = this.svg.select(`#player-polygon-${d.player_id}`)\n                return polygon.nodes().length > 0 ?\n                    [polygon.data()[0].site.x, polygon.data()[0].site.y] :\n                    [undefined, undefined]\n            })\n            // .initialWeight((d) => {\n            //     const polygon = this.svg.select(`#player-polygon-${d.player_id}`)\n            //     return polygon.nodes().length > 0 ?\n            //         polygon.data()[0].site.weight :\n            //         undefined\n            // })\n            .stop()                                               \n\n        let state = simulation.state();\n        while (!state.ended) {\n            simulation.tick();\n            state = simulation.state();\n        }\n        \n        return state.polygons;\n    }\n\n    generatePolygons = (polygons, affectedTeams = [], affectedPlayers = []) => {\n        const playerTravelTransitionTime = 3000;\n\n        affectedPlayers.forEach((playerId) => {\n            this.svg.select(`#player-polygon-${playerId}`).raise();\n            this.svg.select(`#player-image-${playerId}`).raise();\n        })\n\n        let playerPolygons = this.svg\n            .selectAll(\".player-polygons\")\n            .data(polygons, d => d.site.originalObject.data.originalData.player_id)\n            .join(\n                enter => enter.append('path')\n                    .attr(\"class\", d => `player-polygons ${d.site.originalObject.data.originalData.team.team_id}-polygon`)\n                    .attr(\"id\", d => `player-polygon-${d.site.originalObject.data.originalData.player_id}`)\n                    .attr('d', (d) => `M${d.join('L')}z`)\n                    .style(\"fill-opacity\", 0.95)\n                    .style(\"fill\", d => d.site.originalObject.data.originalData.team.color_1)\n                    .style(\"stroke\", d => d.site.originalObject.data.originalData.team.color_2)\n                    .style(\"stroke-width\", \"2px\"),\n                update => {     \n                    update\n                        // .transition()\n                        // .style('opacity', d => affectedTeams.includes(d.site.originalObject.data.originalData.team.team_id) ? 1.0 : 0.4)\n                        .style('opacity', d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id) ? 1.0 : 0.3)\n                        .transition(\"return-opacity\")\n                        .delay(playerTravelTransitionTime)\n                        .style('opacity', 1.0)\n                    \n                    // update.filter(d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id))\n                    //     .attr('d', d => {\n                    //             const radius = Math.sqrt(d.site.originalObject.data.originalData.salary / (159.12*57)) / 2;\n                    //             const path = generateCirclePath(d.site.x, d.site.y, radius);\n                    //             return path\n                    //         })\n\n                    update.filter(d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id))\n                        .raise()\n                        .transition(\"re-position\")\n                        .duration(playerTravelTransitionTime)\n                        .attr('d', (d) => `M${d.join('L')}z`)\n                        .style(\"fill\", d => d.site.originalObject.data.originalData.team.color_1)\n                        .style(\"stroke\", d => d.site.originalObject.data.originalData.team.color_2)\n                    \n                    update.filter(d => affectedTeams.includes(d.site.originalObject.data.originalData.team.team_id))\n                        .transition(\"re-shuffle\")\n                        .delay(playerTravelTransitionTime)\n                        .attr('d', (d) => `M${d.join('L')}z`)\n                        // .style(\"opacity\", 1.0)\n\n\n                    return update;\n                }\n                // exit => exit.remove()\n            )\n        \n        let playerImages = this.svg\n            .selectAll(\".player-polygon-images\")\n            .data(polygons, d => d.site.originalObject.data.originalData.player_id)\n            .join(\n                enter => { \n                    return enter\n                        .append('path')\n                        .attr(\"class\", d => `player-polygon-images ${d.site.originalObject.data.originalData.team.team_id}-polygon-image`)\n                        .attr(\"id\", d => `player-image-${d.site.originalObject.data.originalData.player_id}`)\n                        .attr('d', (d) => `M${d.join('L')}z`)\n                        .style(\"fill\", d => {\n                            const player_id = d.site.originalObject.data.originalData.player_id;\n                            return `url(#${player_id}-photo)`\n                        })\n                        .style(\"stroke\", d => d.site.originalObject.data.originalData.team.color_2)\n                        .style(\"stroke-width\", \"2px\")\n                    // return enter;\n                },\n                update => {\n                    update\n                        // .transition()\n                        .style('opacity', d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id) ? 1.0 : 0.3)\n                        // .style('opacity', d => affectedTeams.includes(d.site.originalObject.data.originalData.team.team_id) ? 1.0 : 0.4)\n                        .transition(\"return-opacity\")\n                        .delay(playerTravelTransitionTime)\n                        .style('opacity', 1.0);\n                    \n                    // update.filter(d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id))\n                    //     .attr('d', d => {\n                    //             const radius = Math.sqrt(d.site.originalObject.data.originalData.salary / (159.12*57)) / 2;\n                    //             const path = generateCirclePath(d.site.x, d.site.y, radius);\n                    //             return path\n                    //         })\n\n                    update.filter(d => affectedPlayers.includes(d.site.originalObject.data.originalData.player_id))\n                        .transition(\"re-position\")\n                        .duration(playerTravelTransitionTime)\n                        .attr('d', (d) => `M${d.join('L')}z`)\n                        .style(\"stroke\", d => d.site.originalObject.data.originalData.team.color_2)\n                    \n                    update.filter(d => affectedTeams.includes(d.site.originalObject.data.originalData.team.team_id))\n                        .transition(\"re-shuffle\")\n                        .delay(playerTravelTransitionTime)\n                        .attr('d', (d) => `M${d.join('L')}z`)\n\n                    return update;\n                }\n                // exit => exit.remove() \n            )        \n    }\n\n    updateMapColor = ({ opacity, mapColor }) => { \n        this.mapPath\n            .transition()\n            // .duration(300)\n            .style(\"fill-opacity\", opacity)\n            .style(\"fill\", mapColor);\n    }\n\n    runTransactions = (playerData, allPolygons, affectedTeams, affectedPlayers) => {\n        affectedTeams.forEach((team_id) => {\n            console.log(\"Team Polygon Update\", team_id)\n            allPolygons = allPolygons.filter((polygon) => polygon.site.originalObject.data.originalData.team.team_id !== team_id) \n\n            let team = this.teamData.find((t) => t.team_id === team_id)\n            let players = this.playerData.filter((player) => player.team.team_id === team.team_id);\n            \n            let polygons = this.addTeamTreemap({ team, players })\n            allPolygons = allPolygons.concat(polygons);\n        })\n\n        console.log(\"Generate Polygons\")\n        this.generatePolygons(allPolygons, affectedTeams, affectedPlayers);\n    }\n  \n    resize = (width, height) => { /*...*/ }\n    \n  }\n  \n  export default PlayerMap;\n\n\n// update\n// .transition()\n// .duration(2000)\n// .attr('d', (d) => `M${d}z`)\n// .attr('d', d => {\n//     const radius = Math.sqrt(d.site.originalObject.data.originalData.salary / (159.12*57)) / 2;\n//     const path = generateCirclePath(d.site.x, d.site.y, radius);\n//     return path\n// })\n\n// .attr('d', d => {\n//     const radius = Math.sqrt(d.site.originalObject.data.originalData.salary / (159.12*57)) / 2;\n//     const path = generateCirclePath(d.site.x+20, d.site.y+20, radius);\n//     return path\n// })","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js",["48"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"intersection-observer\";\n\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { groupBy } from 'lodash';\n\nimport PlayerMapWrapper from './components/PlayerMapWrapper';\nimport { json, csv } from 'd3-fetch';\n\n\nlet isMobile = window.matchMedia('(max-width: 700px)').matches;\n\n// setup resize event\n// window.addEventListener(\"resize\", scroller.resize);\n\n// Begin loading datafiles\nconst promises = [\n  json(\"data/us_states.json\"),\n  csv(\"data/team_data.csv\"),\n  csv(\"data/players_start.csv\"),\n  json(\"data/transactions.json\")\n];\n\n\nPromise.all(promises).then((allData) => {\n    const geoData = allData[0];\n    const teamData = allData[1];\n    let playerData = allData[2];\n    let transactionData = groupBy(allData[3], d => d.date);\n    console.log(Object.keys(transactionData)[0]);\n    \n\n    playerData.forEach(player => {\n      player[\"2021_salary\"] = +player[\"2021_salary\"];\n      player[\"2020_salary\"] = +player[\"2020_salary\"];\n\n      player.salary = player[\"2021_salary\"] ||  player[\"2020_salary\"];\n    });\n\n    playerData = playerData.filter(x => x.salary !== undefined);\n\n    ReactDOM.render(\n          <PlayerMapWrapper\n            id={\"viz-tile\"}\n            _geoData={geoData}\n            _teamData={teamData}\n            _playerData={playerData}\n            transactionData={transactionData}\n          />,\n      document.getElementById('content'));\n    });\n\n\n// <div class=\"step\">Hello 1</div>\n// <div class=\"step\">Hello 2</div>\n// <div class=\"step\">Hello 3</div>\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reducers/transactionReducer.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/TransactionCard.js",["49","50","51","52"],{"ruleId":"53","severity":1,"message":"54","line":1,"column":38,"nodeType":"55","messageId":"56","endLine":1,"endColumn":48},{"ruleId":"53","severity":1,"message":"57","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":25},{"ruleId":"53","severity":1,"message":"58","line":10,"column":8,"nodeType":"55","messageId":"56","endLine":10,"endColumn":26},{"ruleId":"53","severity":1,"message":"59","line":19,"column":21,"nodeType":"55","messageId":"56","endLine":19,"endColumn":31},{"ruleId":"53","severity":1,"message":"60","line":20,"column":22,"nodeType":"55","messageId":"56","endLine":20,"endColumn":33},{"ruleId":"53","severity":1,"message":"61","line":21,"column":24,"nodeType":"55","messageId":"56","endLine":21,"endColumn":37},{"ruleId":"62","severity":1,"message":"63","line":48,"column":8,"nodeType":"64","endLine":48,"endColumn":10,"suggestions":"65"},{"ruleId":"53","severity":1,"message":"66","line":8,"column":7,"nodeType":"55","messageId":"56","endLine":8,"endColumn":19},{"ruleId":"53","severity":1,"message":"67","line":10,"column":7,"nodeType":"55","messageId":"56","endLine":10,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":111,"column":13,"nodeType":"70","messageId":"71","endLine":111,"endColumn":36},{"ruleId":"53","severity":1,"message":"72","line":275,"column":13,"nodeType":"55","messageId":"56","endLine":275,"endColumn":27},{"ruleId":"53","severity":1,"message":"73","line":323,"column":13,"nodeType":"55","messageId":"56","endLine":323,"endColumn":25},{"ruleId":"53","severity":1,"message":"74","line":14,"column":5,"nodeType":"55","messageId":"56","endLine":14,"endColumn":13},{"ruleId":"53","severity":1,"message":"75","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"76","line":1,"column":27,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"54","line":1,"column":38,"nodeType":"55","messageId":"56","endLine":1,"endColumn":48},{"ruleId":"53","severity":1,"message":"77","line":1,"column":50,"nodeType":"55","messageId":"56","endLine":1,"endColumn":56},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'PlayerMapControls' is defined but never used.","'transactionReducer' is defined but never used.","'setGeoData' is assigned a value but never used.","'setTeamData' is assigned a value but never used.","'setPlayerData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'geoData', 'height', 'mapColor', 'onStepEnter', 'playerData', 'scroller', 'teamData', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["78"],"'getRandomInt' is assigned a value but never used.","'generateCirclePath' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","'playerPolygons' is assigned a value but never used.","'playerImages' is assigned a value but never used.","'isMobile' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.",{"desc":"79","fix":"80"},"Update the dependencies array to be: [geoData, height, mapColor, onStepEnter, playerData, scroller, teamData, width]",{"range":"81","text":"82"},[1703,1705],"[geoData, height, mapColor, onStepEnter, playerData, scroller, teamData, width]"]