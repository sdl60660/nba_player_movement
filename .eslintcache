[{"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js":"1","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js":"2","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js":"3","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js":"4","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js":"5","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js":"6"},{"size":2019,"mtime":1610041304098,"results":"7","hashOfConfig":"8"},{"size":10908,"mtime":1610055569586,"results":"9","hashOfConfig":"8"},{"size":1500,"mtime":1610010229116,"results":"10","hashOfConfig":"8"},{"size":116,"mtime":1609874045521,"results":"11","hashOfConfig":"8"},{"size":687,"mtime":1609884950379,"results":"12","hashOfConfig":"8"},{"size":362,"mtime":1609865011532,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1d86ciq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapWrapper.js",["28","29","30","31","32"],"import React, { useState, useEffect, useRef } from 'react';\nimport * as chromatic from \"d3-scale-chromatic\";\n\nimport PlayerMapControls from './PlayerMapControls';\nimport PlayerMap from '../d3-components/PlayerMap';\nimport PlayerMapContext from '../context/playerMapContext';\n\n\nlet vis;\n\nconst PlayerMapWrapper = ({ _geoData, _teamData, _playerData, scroller, parentElement=\"player-map\" }) => {\n    // const colors = [\"#f23d23\", \"#3434ff\", \"#67f402\"];\n    // const colors = d3.interpolate(\"red\", \"green\", )(d3.randomUniform()())\n    const colors = chromatic.schemeCategory10;\n\n    const [mapColor, setMapColor] = useState('#0000ff');\n    const [geoData, setGeoData] = useState(_geoData);\n    const [teamData, setTeamData] = useState(_teamData);\n    const [playerData, setPlayerData] = useState(_playerData);\n    const [width, setWidth] = useState(1400);\n    const [height, setHeight] = useState(850);\n    const [opacity, setOpacity] = useState(1.0);\n\n    scroller\n        .onStepEnter(({ element, index, direction }) => {\n            // console.log({ element, index, direction });\n            // console.log(colors[index]);\n            setMapColor(() => {\n                return colors[index];\n            })\n        })\n        .onStepExit(({ element, index, direction }) => {\n            // console.log({ element, index, direction })\n        });\n\n    const refElement = useRef(null);\n\n    useEffect(() => {\n        vis = new PlayerMap(refElement.current, { width, height, mapColor, geoData, teamData, playerData });\n    }, []);\n\n    useEffect(() => {\n        // console.log(\"Effect triggered\", mapColor, opacity)\n        vis.updateMapColor({ mapColor, opacity })\n    }, [mapColor, opacity]);\n\n    return (\n        <PlayerMapContext.Provider value={{ opacity, setOpacity, mapColor, setMapColor, setHeight, setWidth }}>\n            <div ref={refElement} id={\"viz-tile\"}>\n                {/* <PlayerMapControls /> */}\n            </div>\n        </PlayerMapContext.Provider>\n    )\n}\n\nexport { PlayerMapWrapper as default }\n","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/d3-components/PlayerMap.js",["33","34","35"],"import * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { voronoiMapSimulation } from 'd3-voronoi-map';\nimport seedrandom from 'seedrandom';\n\n\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\nconst getCircleCoordinates = (centerX, centerY, radius, sides) => {\n    let coordinates = [];\n    \n    for (var i = 0; i < sides; i++) {\n        const coordinate = [\n            (centerX + radius * Math.cos(2 * Math.PI * i / sides)),\n            (centerY + radius * Math.sin(2 * Math.PI * i / sides))\n        ];\n        coordinates.push(coordinate)\n    }\n    \n    return coordinates;\n}\n\nclass PlayerMap {\n\n    containerEl;\n    props;\n    svg; \n  \n    constructor(containerEl, props) {\n        this.containerEl = containerEl;\n        this.props = props;\n\n        const { width, height, mapColor, geoData, teamData, playerData } = props;\n        // console.log(props);\n\n        this.weightScale = d3.scaleLinear()\n            .domain(d3.extent(playerData, (d) => d.salary))\n            .range([1,100])\n\n        const maxCircleRadius = 57;\n        this.voronoiRadius = d3.scaleLinear()\n            .domain([0, 350])\n            .range([0, maxCircleRadius])\n \n        this.svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"viewBox\", [0, 0, width, height]);\n\n        this.initPlayerPhotos({ playerData, maxCircleRadius })\n        \n        const geoJSON = topojson.feature(geoData, geoData.objects.states);\n        const projection = d3.geoAlbersUsa()\n            .fitExtent([[0, 0], [width-20, height-20]], geoJSON);\n        this.generateMap({ geoJSON, projection, mapColor });\n\n        this.generateTeams({ teamData, playerData, projection });\n\n        setTimeout(() => {\n            let team = teamData[7];\n            const players = playerData\n                .filter((player) => player.team_id === team.team_id || player.player_id === \"adamsst01\")\n                .map((player) => ({ \n                    weight: this.weightScale(player.salary),\n                    player_name: player.player,\n                    player_id: player.player_id,\n                    team: player.team_id,\n                    per: player.per\n                }))\n            \n            const weightSum = players.map((x) => x.weight).reduce((a, b) => a + b, 0);\n            team.radius = this.voronoiRadius(weightSum);\n            \n            this.addTeamTreemap({ teamData: team, players });\n        }, 5000)\n\n        setTimeout(() => {\n            let team = teamData[7];\n            const players = playerData\n                .filter((player) => player.team_id === team.team_id)\n                .slice(0, 10)\n                .map((player) => ({ \n                    weight: this.weightScale(player.salary),\n                    player_name: player.player,\n                    player_id: player.player_id,\n                    team: player.team_id,\n                    per: player.per\n                }))\n            \n            const weightSum = players.map((x) => x.weight).reduce((a, b) => a + b, 0);\n            team.radius = this.voronoiRadius(weightSum);\n            \n            this.addTeamTreemap({ teamData: team, players });\n        }, 10000)\n    \n    }\n\n    initPlayerPhotos = ({ playerData, maxCircleRadius }) => {\n        const defs = this.svg.append('svg:defs');\n        defs.selectAll(\".player-photo\")\n            .data(playerData, d => d.player_id)\n            .enter()\n                .append(\"svg:pattern\")\n                .attr(\"class\", \"player-photo\")\n                .attr(\"id\", d => `${d.player_id}-photo`)\n                .attr(\"height\", 1)\n                .attr(\"width\", 1)\n                .attr(\"patternUnits\", \"objectBoundingBox\")\n                .append(\"svg:image\")\n                    .attr(\"xlink:href\", d => `images/${d.player_id}.png`)\n                    // Found the ratio of salary to polygon area, per unit of circle radius range (~159), then took sqrt to get length of one side (width)\n                    .attr(\"width\", d => Math.sqrt(d.salary / (159.12*maxCircleRadius)))\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n    }\n    \n    generateMap = ({ geoJSON, projection, mapColor }) => {\n        geoJSON.features = geoJSON.features.filter(d => ![\"Alaska\", \"Hawaii\"].includes(d.properties.NAME));\n\n        let path = d3.geoPath()\n            .projection(projection);\n                \n        this.mapPath = this.svg.append(\"g\")\n            .attr(\"class\", \"background-map\")\n            .selectAll(\"path\");\n        \n        this.mapPath = this.mapPath.data( geoJSON.features, d => d)\n            .join(\n                enter => enter.append(\"path\")\n                    .attr(\"d\", path)\n                    .attr(\"class\", \"state-path\")\n                    .style(\"opacity\", 0.8)\n                    .style(\"stroke\",\"black\")\n                    .style('stroke-width', 0.5)\n                    .style(\"fill\", mapColor)\n\n                // exit => exit.remove()\n            );\n    }\n    \n    generateTeams = ({ teamData, playerData, projection }) => {\n        this.teams = this.svg.append(\"g\")\n            .attr(\"class\", \"teams\");\n      \n        this.teamGroups = this.teams.selectAll(\"g\")\n            .data(teamData, d => d.team_id)\n            .enter()\n            .append(\"g\")\n                .attr(\"class\", d => `team-group ${d.team_id}-group`);\n\n        teamData.forEach((teamData) => {\n            const [xCenter, yCenter] = projection([teamData.longitude, teamData.latitude])\n            teamData.xCoordinate = xCenter;\n            teamData.yCoordinate = yCenter;\n\n            const players = playerData\n                .filter((player) => player.team_id === teamData.team_id)\n                .map((player) => ({ \n                    weight: this.weightScale(player.salary),\n                    player_name: player.player,\n                    player_id: player.player_id,\n                    team: player.team_id,\n                    per: player.per\n                }))\n            \n            const weightSum = players.map((x) => x.weight).reduce((a, b) => a + b, 0);\n            teamData.radius = this.voronoiRadius(weightSum);\n\n            this.addTeamTreemap({ teamData, players });\n        })\n\n        const tick = () => {\n            this.teamGroups\n                .style(\"transform\", d => {\n                    let dx = d.x - d.xCoordinate\n                    let dy = d.y - d.yCoordinate\n                    return `translate(${dx}px, ${dy}px)`\n                })\n        }\n\n        const simulation = d3.forceSimulation()\n            .nodes(teamData)\n            .force('x', d3.forceX(d => d.xCoordinate).strength(1.0))\n            .force('y', d3.forceY(d => d.yCoordinate).strength(1.0))\n            .force(\"charge\", d3.forceManyBody())\n            .force(\"collision\", d3.forceCollide(d => d.radius + 4))\n            .on(\"tick\", tick)\n            // .stop()\n        \n        for (let i =0; i < 500; i++) {\n            simulation.tick();\n        };\n    \n    }\n\n    addTeamTreemap = ({ teamData, players }) => {\n        // console.log(players);\n        let xVal = teamData.x || teamData.xCoordinate;\n        let yVal = teamData.y || teamData.yCoordinate;\n        \n        const simulation = voronoiMapSimulation(players)\n            .prng(seedrandom('randomsed'))\n            .clip(getCircleCoordinates(xVal, yVal, teamData.radius, 35))\n            .stop()                                               \n\n        let state = simulation.state();\n        while (!state.ended) {\n            simulation.tick();\n            state = simulation.state();\n        }\n        \n        let teamGroup = this.teams\n            .select(`.${teamData.team_id}-group`);\n\n        let playerPolygons = teamGroup\n            .selectAll(\".player-polygons\")\n            .data(state.polygons, d => d.site.originalObject.data.originalData.player_id)\n            .join(\n                enter => enter.append('path')\n                    .attr(\"class\", d => `player-polygons ${teamData.team_id}-polygon`)\n                    .attr(\"id\", d => `player-polygon-${d.site.originalObject.data.originalData.player_id}`)\n                    .attr('d', (d) => `M${d}z`)\n                    .style(\"fill-opacity\", 0.95)\n                    .style(\"fill\", d => teamData.color_1)\n                    .style(\"stroke\", teamData.color_2)\n                    .style(\"stroke-width\", \"2px\"),\n                update => {\n                    update\n                        .transition()\n                        .duration(2000)\n                        .attr('d', (d) => `M${d}z`)\n                    return update;\n                    },\n                exit => exit.remove()\n            )\n        \n        let playerImages = teamGroup\n            .selectAll(\".player-polygon-images\")\n            .data(state.polygons, d => d.site.originalObject.data.originalData.player_id)\n            .join(\n                enter => enter.append('path')\n                    .attr(\"class\", d => `player-polygon-images ${teamData.team_id}-polygon-image`)\n                    .attr(\"id\", d => `player-image-${d.site.originalObject.data.originalData.player_id}`)\n                    .attr('d', (d) => `M${d}z`)\n                    .style(\"fill\", d => {\n                        const player_id = d.site.originalObject.data.originalData.player_id;\n                        return `url(#${player_id}-photo)`\n                    })\n                    .style(\"stroke\", teamData.color_2)\n                    .style(\"stroke-width\", \"2px\"),\n                update => {\n                    update\n                        .transition()\n                        .duration(2000)\n                        .attr('d', (d) => `M${d}z`);\n                    return update;\n                    },\n                exit => exit.remove() \n            )\n        \n    }\n\n    // updateTeam = ({ teamData, players }) => {\n    //     const simulation = voronoiMapSimulation(players)\n    //         .prng(seedrandom('randomsed'))\n    //         .clip(getCircleCoordinates(teamData.x, teamData.y, teamData.radius, 35))\n    //         .stop()                                               \n\n    //     let state = simulation.state();\n    //     while (!state.ended) {\n    //         simulation.tick();\n    //         state = simulation.state();\n    //     }\n\n    //     let teamGroup = this.teams\n    //         .select(`.${teamData.team_id}-group`);\n        \n    //     let playerPolygons = teamGroup\n    //         .selectAll(\".player-polygons\")\n    //         .data()\n\n    //     let playerImages = teamGroup\n    //         .selectAll(\".player-polygon-images\")\n        \n\n    // }\n\n    updateMapColor = ({ opacity, mapColor }) => { \n        this.mapPath\n            .transition()\n            // .duration(300)\n            .style(\"fill-opacity\", opacity)\n            .style(\"fill\", mapColor);\n    }\n  \n    resize = (width, height) => { /*...*/ }\n    \n  }\n  \n  export default PlayerMap;","/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/index.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/context/playerMapContext.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/components/PlayerMapControls.js",[],"/Users/samlearner/miscellaneous_programming/portfolio_projects/nba_player_movement/src/reportWebVitals.js",[],{"ruleId":"36","severity":1,"message":"37","line":4,"column":8,"nodeType":"38","messageId":"39","endLine":4,"endColumn":25},{"ruleId":"36","severity":1,"message":"40","line":17,"column":21,"nodeType":"38","messageId":"39","endLine":17,"endColumn":31},{"ruleId":"36","severity":1,"message":"41","line":18,"column":22,"nodeType":"38","messageId":"39","endLine":18,"endColumn":33},{"ruleId":"36","severity":1,"message":"42","line":19,"column":24,"nodeType":"38","messageId":"39","endLine":19,"endColumn":37},{"ruleId":"43","severity":1,"message":"44","line":40,"column":8,"nodeType":"45","endLine":40,"endColumn":10,"suggestions":"46"},{"ruleId":"36","severity":1,"message":"47","line":7,"column":7,"nodeType":"38","messageId":"39","endLine":7,"endColumn":19},{"ruleId":"36","severity":1,"message":"48","line":214,"column":13,"nodeType":"38","messageId":"39","endLine":214,"endColumn":27},{"ruleId":"36","severity":1,"message":"49","line":236,"column":13,"nodeType":"38","messageId":"39","endLine":236,"endColumn":25},"no-unused-vars","'PlayerMapControls' is defined but never used.","Identifier","unusedVar","'setGeoData' is assigned a value but never used.","'setTeamData' is assigned a value but never used.","'setPlayerData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'geoData', 'height', 'mapColor', 'playerData', 'teamData', and 'width'. Either include them or remove the dependency array.","ArrayExpression",["50"],"'getRandomInt' is assigned a value but never used.","'playerPolygons' is assigned a value but never used.","'playerImages' is assigned a value but never used.",{"desc":"51","fix":"52"},"Update the dependencies array to be: [geoData, height, mapColor, playerData, teamData, width]",{"range":"53","text":"54"},[1523,1525],"[geoData, height, mapColor, playerData, teamData, width]"]